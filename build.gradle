apply plugin: 'java'
group = 'rcstadheim'

ext.springVersion = '4.3.1.RELEASE'
ext.htmlunitVersion = '2.22'
ext.junitVersion = '4.11'
ext.log4jVersion = '1.2.17'
ext.aspectjVersion = '1.8.4'
ext.mybatisVersion = '3.4.1'
//ext.mongoVersion = '3.3.0'
ext.mongoVersion = '2.12.5'
ext.postgresVersion = '9.4-1206-jdbc42'
ext.commonsLangVersion = '20030203.000129'
ext.coltVersion = '1.2.0'
ext.ehcacheVersion = '1.0.1'
ext.ehcacheSpringVersion = '1.2.0'
//ext.reactiveVersion = '1.1.0'
ext.sodiumVersion = '1.0.0'



//-------------------- clojure ---------------------
ext.clojureVersion = '1.7.0'
ext.clojureContribVersion = '1.2.0'
ext.algoMonadsVersion = '0.1.5'
ext.numericTowerVersion = '0.0.4'


ext.major = '5'
ext.minor = '3'

ext.parentDist = '/home/rcs/opt/java/maunaloa/dist'

version = "${major}.${minor}.SNAPSHOT"

//version = "${major}.${minor}.0"

ext.myLibName = "maunaloa-${version}.jar"

configurations {
    sshAntTask
}

repositories {
    mavenCentral()
    maven {
        url 'http://clojars.org/repo'
    }
}

dependencies {
    compile project(':oahu')
    compile project(':oahux')
    compile project(':ranoraraku')
    compile project(':maunaloax')
    compile project(':vega')
    compile project(':netfonds-repos')
    runtime project(':waimea')

    //------------------- aspectj -------------------
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    compile "org.aspectj:aspectjtools:$aspectjVersion"
    compile "org.aspectj:aspectjweaver:$aspectjVersion"
    //------------------- mybatis -------------------
    compile "org.mybatis:mybatis:$mybatisVersion"
    //------------------- spring -------------------
    compile "org.springframework:spring-core:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-aop:$springVersion"
    //------------------- mongo-------------------
    compile "org.mongodb:mongo-java-driver:$mongoVersion"
    //------------------- clojure-------------------
    runtime "org.clojure:clojure:$clojureVersion"
    //runtime "org.clojure:clojure-contrib:$clojureContribVersion"
    //------------------- JCache -------------------
    //runtime "org.ehcache:jcache:$ehcacheVersion"
    //runtime "org.jsr107.ri:cache-annotations-ri-guice:1.0.0"
    //compile "com.googlecode.ehcache-spring-annotations:ehcache-spring-annotations:$ehcacheSpringVersion"

    //------------------- Colt -------------------
    runtime "colt:colt:$coltVersion"

    //------------------- Reactive -------------------
    //compile "io.reactive:rxjava:$reactiveVersion"
    compile "nz.sodium:sodium:$sodiumVersion"
    //------------------- HtmlUnit-------------------
    compile "net.sourceforge.htmlunit:htmlunit:$htmlunitVersion"
    //------------------- diverse -------------------
    sshAntTask 'org.apache.ant:ant-jsch:1.9.4'
    sshAntTask 'com.jcraft:jsch:0.1.51'
    compile "junit:junit:$junitVersion"
    compile "log4j:log4j:$log4jVersion"
}

/*
buildscript {
    repositories {
        maven {
            url 'http://clojars.org/repo'
        }
    }

    dependencies {
        classpath 'clojuresque:clojuresque:1.5.8'
    }
}
//*/

task configureSshAntTask {
    description = 'Scp task'
    // Get passphrase from user input.
    //def console = System.console()
    //def passphrase = console.readPassword('%s: ', 'Please enter the passphrase for the keyfile')

    // Redefine scp Ant task, with the classpath property set to our newly defined
    // sshAntTask configuration classpath.
    ant.taskdef(name: 'scp',
            classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
            classpath: configurations.sshAntTask.asPath)
}


String clazzPath() {
    ((configurations.runtime.files.collect { f ->
        f.name
    }) << ".").join(" ")
}

jar {
    manifest {
        attributes 'Main-Class': 'maunaloa.App'
        attributes 'Class-Path': clazzPath()
    }
}

task copydeps(type: Copy) {
    into 'dist' from configurations.runtime
}

String myDepLibName(String pname, LibContext ctx) {
    switch (ctx) {
        case LibContext.BARE:
            project(':' + pname).tasks['jar'].archiveName
            break
        case LibContext.DIST:
            'dist/' + project(':' + pname).tasks['jar'].archiveName
            break
        case LibContext.FULL_PATH:
            project(':' + pname).tasks['jar'].archivePath
            break
    }
}


enum LibContext {
    BARE,DIST,FULL_PATH
}

def scp2hilo(Closure fset) {
    //ant.scp(todir: 'rcs@hilo:/home/rcs/opt/java/develop/maunaloa/dist',
    ant.scp(todir: 'rcs@hilo:/home/rcs/tmp3',
            password: 'q2uebec9',
            verbose: 'true') {
        fset()
    }
}

task hilo (description: 'Scp jars: maunaloa',
           group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
            include(name: myLibName)
        }
    }
}

task hiloConfig (description: 'Scp config files: maunaloa.xml',
           group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
            include(name: 'maunaloa.xml')
        }
    }
}

task hiloq (description: 'Scp jars: maunaloaq',
            group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
        }
    }
}


task hiloWithFriends(description: 'Scp jars: maunaloa, maunaloaq',
                     group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
            include(name: myLibName)
        }
    }
}

def depLibs = ['oahu','oahux','maunaloax','ranoraraku','vega']

task hilofull (description: 'Scp jars: all RCS jars',
               group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
            depLibs.each { s ->
                include(name: myDepLibName(s,LibContext.BARE))
            }
            include(name: myLibName)
        }
    }
}

task hilofullest (description: 'Scp jars: THE WORKS',
                  group: 'Hilo') <<  {
    scp2hilo {
        ant.fileset(dir: 'dist') {
            include(name: "*.jar")
        }
    }
}

/*
task copyRcsLibs(type: Copy) {
    description 'Copies all local (rcs) dependent jar files into dist'
    depLibs.each { s ->
        into 'dist' from new File(myDepLibName(s,LibContext.FULL_PATH))
    }
}

task deleteRcsLibs(type: Delete) {
    description 'Deletes all local (rcs) dependent jar files from dist'
    depLibs.each { s ->
        delete myDepLibName('oahu',LibContext.DIST)
    }
    delete "$libsDir/$myLibName"
}
*/

task buildAndCopy(type: Copy, dependsOn: build) {
    description 'Builds maunaloa jar and copies into dist'
    into 'dist' from new File("$libsDir/$myLibName")
}

task buildAndCopyAll(type: Copy, dependsOn: build) {
    description 'Builds maunaloa jar and copies into dist'
    into 'dist' from new File("$libsDir/$myLibName")
    depLibs.each { s ->
        into 'dist' from new File(myDepLibName(s,LibContext.FULL_PATH))
    }
}

task showMeCache << {
    configurations.compile.each { println it }
}

task showClazzPath << {
    println clazzPath()
}
